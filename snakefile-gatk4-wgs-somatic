__title__ = "Pipeline for Somatic Variant Calling with Mutect2"
__author__ = "Lars Andersen <larsmew@gmail.com>"
__date__ = "20/04/2018"
__version__ = "1.0"

import time
import os

#########################################################
####                       Input                     ####
#########################################################
# Somatic samples information (matched and tumor-only)
configfile: "../somatic_matched_samples.yaml"

# Panel of normals location
pon_location = "../somaticPanelOfNormals"

# Sample information
FAMNAME = os.getcwd().rsplit("/",1)[1]
NORMALS, = glob_wildcards(pon_location+"/{sample}_recal.bam")

# Explicit paths for external input files
ref = "/work/sduvarcall/bwa-0.7.13/reference/human_g1k_v37_decoy.fasta"
gnomead = "/work/sduvarcall/knownSNPs/gnomead/af-only-gnomad.raw.sites.b37.vcf.gz"


#########################################################
####                      Output                     ####
#########################################################
log_file = "log_file_somatic.txt"
output_somatic = "somatic_variants"


#########################################################
####                       Setup                     ####
#########################################################
# Timing
totim = time.time()
timeFormat = "%Y_%m_%d:%X" # year, month, day, time H:M:S

# Memory
mem = "-Xmx12g" # login nodes - be careful not running too many jobs at once!
#mem = "-Xmx24g" # slim nodes
#mem = "-Xmx32g" # Fat nodes

# Define chromosomes - perhaps implement function to extract from reference
CHROM = ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13",
         "14", "15", "16", "17", "18", "19", "20", "21", "22", "X", "Y", "MT", 
		 "hs37d5"]

PATCHES = ["GL000207.1", "GL000226.1", "GL000229.1", "GL000231.1", "GL000210.1", 
		   "GL000239.1", "GL000235.1", "GL000201.1", "GL000247.1", "GL000245.1", 
		   "GL000197.1", "GL000203.1", "GL000246.1", "GL000249.1", "GL000196.1", 
		   "GL000248.1", "GL000244.1", "GL000238.1", "GL000202.1", "GL000234.1", 
		   "GL000232.1", "GL000206.1", "GL000240.1", "GL000236.1", "GL000241.1", 
		   "GL000243.1", "GL000242.1", "GL000230.1", "GL000237.1", "GL000233.1", 
		   "GL000204.1", "GL000198.1", "GL000208.1", "GL000191.1", "GL000227.1", 
		   "GL000228.1", "GL000214.1", "GL000221.1", "GL000209.1", "GL000218.1", 
		   "GL000220.1", "GL000213.1", "GL000211.1", "GL000199.1", "GL000217.1", 
		   "GL000216.1", "GL000215.1", "GL000205.1", "GL000219.1", "GL000224.1", 
		   "GL000223.1", "GL000195.1", "GL000212.1", "GL000222.1", "GL000200.1", 
		   "GL000193.1", "GL000194.1", "GL000225.1", "GL000192.1", "NC_007605"]


#########################################################
####  Define workflow start, stop and error actions  ####
#########################################################
onstart:
	shell("echo $(head /work/sduvarcall/exome_analysis/pipeline_version.txt -n 1) >> {log_file}")
	shell("echo 'Started execution of pipeline:' $(date +'%Y-%m-%d %H:%M:%S') >> {log_file}")
	shell("mkdir -p "+output_somatic)

onsuccess:
	fiTime = 'Total time:', str((time.time()-totim) / 60), 'minutes'
	shell("echo 'Finished execution on' $(date +'%Y-%m-%d %H:%M:%S') >> {log_file}")
	shell("echo Execution time: {fiTime} >> {log_file}")
	shell("cat {log_file} >> log_file_somatic_success.txt")

onerror:
	fiTime = 'Total time:', str((time.time()-totim) / 60), 'minutes'
	shell("echo 'Finished execution on' $(date +'%Y-%m-%d %H:%M:%S') >> {log_file}")
	shell("echo Execution time: {fiTime} >> {log_file}")
	shell("echo 'ERROR OCCURED, PLEASE REFER TO SLURM LOGFILE FOR DETAILS' >> {log_file}")
	shell("cp {log_file} log_file_somatic_error.txt")


#########################################################
####                  Run All Rules                  ####
#########################################################
'''
Rule all
'''
# Matched normal-tumor samples
if "fam"+FAMNAME in config:
	PAIRS = config["fam"+FAMNAME]
	print(PAIRS)
	
	rule all_pairs:
		input:
			#[expand(output_somatic+"/{normal}_vs_{tumor}_somatic_variants_filtered_gatk.vcf",
			[expand(output_somatic+"/{normal}_vs_{tumor}_somatic_variants_mutect2_filtered.vcf",
				normal=PAIRS[pair]["normal"],
				tumor=PAIRS[pair]["tumor"]) for pair in PAIRS]

# Tumor only samples - NEEDS TESTING AFTER PAIRS HAVE BEEN TESTED
if "fam"+FAMNAME+"_tumor" in config:
	TUMORS = config["fam"+FAMNAME+"_tumor"]
	print(TUMORS)

	rule all_tumors:
		input:
			[expand(output_somatic+"/{tumor}_somatic_variants_mutect2_tumorOnly_filtered.vcf",
				tumor=TUMORS[t]) for t in TUMORS]


#########################################################
####       Create Somatic Panel of Normals           ####
#########################################################
'''
Run Mutect2 in tumor-only mode for each normal sample
'''
rule Mutect2_tumor_only_pon:
	input:
		bam=pon_location+"/{sample}_recal.bam"
	output:
		vcf=temp(pon_location+"/{sample}_for_pon__{chrom}.vcf"),
		idx=temp(pon_location+"/{sample}_for_pon__{chrom}.vcf.idx")
	shell:
		"""
		gatk --java-options {mem} Mutect2 \
		-R {ref} \
		-I {input} \
		-tumor {wildcards.sample} \
		--germline-resource {gnomead} \
		-L {wildcards.chrom} \
		-O {output.vcf}
		"""
	
rule Mutect2_tumor_only_patches_pon:
	input:
		bam=pon_location+"/{sample}_recal.bam"
	output:
		vcf=temp(pon_location+"/{sample}_for_pon_patches.vcf"),
		idx=temp(pon_location+"/{sample}_for_pon_patches.vcf.idx")
	params:
		intervals=expand("-L {interval}", interval=PATCHES)
	shell:
		"""
		gatk --java-options {mem} Mutect2 \
		-R {ref} \
		-I {input} \
		-tumor {wildcards.sample} \
		--germline-resource {gnomead} \
		{params.intervals} \
		-O {output.vcf}
		"""

rule combineVCFs_PON:
	input:
		vcfs=expand(pon_location+"/{{sample}}_for_pon__{chrom}.vcf", chrom=CHROM),
		idx=expand(pon_location+"/{{sample}}_for_pon__{chrom}.vcf.idx", chrom=CHROM),
		patches=pon_location+"/{sample}_for_pon_patches.vcf",
		patches_idx=pon_location+"/{sample}_for_pon_patches.vcf.idx"
	output:
		vcf=pon_location+"/{sample}_for_pon.vcf"
	params:
		vcfs=lambda wildcards: expand("-V "+pon_location+"/"+wildcards.sample+
									  "_for_pon__{chrom}.vcf", chrom=CHROM)
	shell:
		"GenomeAnalysisTK \ "
		"-T CombineVariants \ "
		"-R {ref} \ "
		"{params.vcfs} \ "
		"-V {input.patches} \ "
		"-o {output} \ "
		"-genotypeMergeOptions UNIQUIFY "


'''
Combine the normal calls using CreateSomaticPanelOfNormals.
'''
rule CreateSomaticPanelOfNormals:
	input:
		vcf=expand(pon_location+"/{sample}_for_pon.vcf", sample=NORMALS)
	output:
		pon=pon_location+"/pon.vcf.gz"
	params:
		vcf=expand("-vcfs "+pon_location+"/{sample}_for_pon.vcf", sample=NORMALS)
	shell:
		"""
		gatk --java-options {mem} CreateSomaticPanelOfNormals \
		{params.vcf} \
		-O {output}
		"""
		

##########################################################
####  Call Somatic Variants using Mutect2 on matched  ####
####   Tumor-Normal samples on per chromesome basis   ####
##########################################################
'''
Mutect2 on matched Tumor-Normal samples
'''
rule Mutect2_matched:
	input:
		normal="{normal}_recal.bam",
		tumor="{tumor}_recal.bam",
		pon="../somaticPanelOfNormals/pon.vcf.gz"
	output:
		vcf=temp(output_somatic+"/{normal}_vs_{tumor}_somatic_variants__{chrom}.vcf"),
		idx=temp(output_somatic+"/{normal}_vs_{tumor}_somatic_variants__{chrom}.vcf.idx")
		#vcf=output_somatic+"/{normal}_vs_{tumor}_somatic_variants__{chrom}.vcf",
		#idx=output_somatic+"/{normal}_vs_{tumor}_somatic_variants__{chrom}.vcf.idx"
	threads: 8
	shell:
		"""
		gatk --java-options {mem} Mutect2 \
		-R {ref} \
		-I {input.tumor} \
		-tumor {wildcards.tumor} \
		-I {input.normal} \
		-normal {wildcards.normal} \
		--germline-resource {gnomead} \
		--panel-of-normals {input.pon} \
		-L {wildcards.chrom} \
		-O {output.vcf}
		"""

rule Mutect2_matched_patches:
	input:
		normal="{normal}_recal.bam",
		tumor="{tumor}_recal.bam",
		pon="../somaticPanelOfNormals/pon.vcf.gz"
	output:
		vcf=temp(output_somatic+"/{normal}_vs_{tumor}_somatic_variants_patches.vcf"),
		idx=temp(output_somatic+"/{normal}_vs_{tumor}_somatic_variants_patches.vcf.idx")
		#vcf=output_somatic+"/{normal}_vs_{tumor}_somatic_variants_patches.vcf",
		#idx=output_somatic+"/{normal}_vs_{tumor}_somatic_variants_patches.vcf.idx"
	params:
		intervals=expand("-L {interval}", interval=PATCHES)
	shell:
		"""
		gatk --java-options {mem} Mutect2 \
		-R {ref} \
		-I {input.tumor} \
		-tumor {wildcards.tumor} \
		-I {input.normal} \
		-normal {wildcards.normal} \
		--germline-resource {gnomead} \
		--panel-of-normals {input.pon} \
		{params.intervals} \
		-O {output.vcf}
		"""


#########################################################
####           Combine VCFs files into one           ####
#########################################################
rule CatVariants:
	input:
		vcfs=expand(output_somatic+"/{{normal}}_vs_{{tumor}}_somatic_variants__{chrom}.vcf", chrom=CHROM),
		idx=expand(output_somatic+"/{{normal}}_vs_{{tumor}}_somatic_variants__{chrom}.vcf.idx", chrom=CHROM),
		vcf_patches=output_somatic+"/{normal}_vs_{tumor}_somatic_variants_patches.vcf",
		idx_patches=output_somatic+"/{normal}_vs_{tumor}_somatic_variants_patches.vcf.idx"
	output:
		vcf=output_somatic+"/{normal}_vs_{tumor}_somatic_variants_mutect2.vcf",
		idx=output_somatic+"/{normal}_vs_{tumor}_somatic_variants_mutect2.vcf.idx"
	params:
		vcfs=lambda wildcards: expand("-V "+output_somatic+"/"+wildcards.normal+"_vs_"+
		                       wildcards.tumor+"_somatic_variants__{chrom}.vcf", chrom=CHROM)
	shell:
		"GenomeAnalysisTK org.broadinstitute.gatk.tools.CatVariants \ "
		"-R {ref} \ "
		"{params.vcfs} \ "
		"-V {input.vcf_patches} \ "
		"-out {output.vcf} "



#########################################################
####           Create Contamination table            ####
#########################################################
### Sæt sammen til en metode, som tager højde for med og uden normal... (Se gatk4 scripts)
rule GetPileupSummaries_normal:
	input:
		bam="{normal}_recal.bam",
		#var_for_contaminatoin={gnomead}
	output:
		pileup=output_somatic+"/{normal}_normal_pileup.table"
	shell:
		"""
		gatk --java-options {mem} GetPileupSummaries \
		-I {input.bam} \
		-V {gnomead} \
		-O {output}
		"""
		# -V {input.var_for_contamination} \

rule GetPileupSummaries_tumor:
	input:
		bam="{tumor}_recal.bam",
		#var_for_contaminatoin={gnomead}
	output:
		pileup=output_somatic+"/{tumor}_tumor_pileup.table"
	shell:
		"""
		gatk --java-options {mem} GetPileupSummaries \
		-I {input.bam} \
		-V {gnomead} \
		-O {output}
		"""
		# -V {input.var_for_contamination} \


rule CalculateContamination:
	input:
		normal=output_somatic+"/{normal}_normal_pileup.table",
		tumor=output_somatic+"/{tumor}_tumor_pileup.table"
	output:
		contamination=output_somatic+"/{normal}_vs_{tumor}_contamination.table"
	shell:
		"""
		gatk --java-options {mem} CalculateContamination \
		-I {input.tumor} \
		-matched {input.normal} \
		-O {output}
		"""


#########################################################
####              Filter Mutect2 Calls               ####
#########################################################
rule FilterMutectCalls:
	input:
		vcf=output_somatic+"/{normal}_vs_{tumor}_somatic_variants_mutect2.vcf",
		idx=output_somatic+"/{normal}_vs_{tumor}_somatic_variants_mutect2.vcf.idx",
		contamination=output_somatic+"/{normal}_vs_{tumor}_contamination.table"
	output:
		vcf=output_somatic+"/{normal}_vs_{tumor}_somatic_variants_mutect2_filtered.vcf",
		idx=output_somatic+"/{normal}_vs_{tumor}_somatic_variants_mutect2_filtered.vcf.idx"
	shell:
		"""
		gatk --java-options {mem} FilterMutectCalls \
		-V {input.vcf} \
		--contamination-table {input.contamination} \
		-O {output.vcf}
		"""


### TUMOR ONLY ###

##########################################################
####      Call Somatic Variants using Mutect2 on 	  ####
####    Tumor-only samples on per chromesome basis    ####
##########################################################
'''
Mutect2 on Tumor-only sample
'''
rule Mutect2_tumor:
	input:
		tumor="{tumor}_recal.bam",
		pon="../somaticPanelOfNormals/pon.vcf.gz"
	output:
		vcf=temp(output_somatic+"/{tumor}_somatic_variants__{chrom}.vcf"),
		idx=temp(output_somatic+"/{tumor}_somatic_variants__{chrom}.vcf.idx")
	shell:
		"""
		gatk --java-options {mem} Mutect2 \
		-R {ref} \
		-I {input.tumor} \
		-tumor {wildcards.tumor} \
		--germline-resource {gnomead} \
		--panel-of-normals {input.pon} \
		-L {wildcards.chrom} \
		-O {output.vcf}
		"""

rule Mutect2_tumor_patches:
	input:
		tumor="{tumor}_recal.bam",
		pon="../somaticPanelOfNormals/pon.vcf.gz"
	output:
		vcf=temp(output_somatic+"/{tumor}_somatic_variants_patches.vcf"),
		idx=temp(output_somatic+"/{tumor}_somatic_variants_patches.vcf.idx")
	params:
		intervals=expand("-L {interval}", interval=PATCHES)
	shell:
		"""
		gatk --java-options {mem} Mutect2 \
		-R {ref} \
		-I {input.tumor} \
		-tumor {wildcards.tumor} \
		--germline-resource {gnomead} \
		--panel-of-normals {input.pon} \
		{params.intervals} \
		-O {output.vcf}
		"""


#########################################################
####           Combine VCFs files into one           ####
#########################################################
rule CatVariants_tumor:
	input:
		vcfs=expand(output_somatic+"/{{tumor}}_somatic_variants__{chrom}.vcf", chrom=CHROM),
		idx=expand(output_somatic+"/{{tumor}}_somatic_variants__{chrom}.vcf.idx", chrom=CHROM),
		vcf_patches=output_somatic+"/{tumor}_somatic_variants_patches.vcf",
		idx_patches=output_somatic+"/{tumor}_somatic_variants_patches.vcf.idx"
	output:
		vcf=output_somatic+"/{tumor}_somatic_variants_mutect2_tumorOnly.vcf",
		idx=output_somatic+"/{tumor}_somatic_variants_mutect2_tumorOnly.vcf.idx"
	params:
		vcfs=lambda wildcards: expand("-V "+output_somatic+"/"+wildcards.tumor+
		                       "_somatic_variants__{chrom}.vcf", chrom=CHROM)
	shell:
		"GenomeAnalysisTK org.broadinstitute.gatk.tools.CatVariants \ "
		"-R {ref} \ "
		"{params.vcfs} \ "
		"-V {input.vcf_patches} \ "
		"-out {output.vcf} "


#########################################################
####           Create Contamination table            ####
#########################################################
rule CalculateContamination_tumor:
	input:
		tumor=output_somatic+"/{tumor}_tumor_pileup.table"
	output:
		contamination=output_somatic+"/{tumor}_tumor_contamination.table"
	shell:
		"""
		gatk --java-options {mem} CalculateContamination \
		-I {input.tumor} \
		-O {output}
		"""


#########################################################
####              Filter Mutect2 Calls               ####
#########################################################
rule FilterMutectCalls_tumor:
	input:
		vcf=output_somatic+"/{tumor}_somatic_variants_mutect2_tumorOnly.vcf",
		idx=output_somatic+"/{tumor}_somatic_variants_mutect2_tumorOnly.vcf.idx",
		contamination=output_somatic+"/{tumor}_tumor_contamination.table"
	output:
		vcf=output_somatic+"/{tumor}_somatic_variants_mutect2_tumorOnly_filtered.vcf",
		idx=output_somatic+"/{tumor}_somatic_variants_mutect2_tumorOnly_filtered.vcf.idx"
	shell:
		"""
		gatk --java-options {mem} FilterMutectCalls \
		-V {input.vcf} \
		--contamination-table {input.contamination} \
		-O {output.vcf}
		"""






### OLD WAY - GATK3

#########################################################
####              Filter Mutect2 Calls               ####
#########################################################
# rule FilterMutectCalls:
# 	input:
# 		vcfs=output_somatic+"/{normal}_vs_{tumor}_somatic_variants__{chrom}.vcf",
# 		idx=output_somatic+"/{normal}_vs_{tumor}_somatic_variants__{chrom}.vcf.idx",
# 		contamination="{normal}_vs_{tumor}_contamination.table"
# 	output:
# 		vcfs=temp(output_somatic+"/{normal}_vs_{tumor}_somatic_variants_filtered__{chrom}.vcf"),
# 		idx=temp(output_somatic+"/{normal}_vs_{tumor}_somatic_variants_filtered__{chrom}.vcf.idx")
# 	shell:
# 		"""
# 		gatk --java-options {mem} FilterMutectCalls \
# 		-V {input.vcfs} \
# 		--contamination-table {contamination} \
# 		-O {output.vcfs}
# 		"""


#########################################################
####           Combine VCFs files into one           ####
#########################################################
# rule CombineVCFs:
# 	input:
# 		vcfs=expand(output_somatic+"/{{normal}}_vs_{{tumor}}_somatic_variants_filtered__{chrom}.vcf", chrom=CHROM),
# 		idx=expand(output_somatic+"/{{normal}}_vs_{{tumor}}_somatic_variants_filtered__{chrom}.vcf.idx", chrom=CHROM)
# 	output:
# 		vcf=output_somatic+"/{normal}_vs_{tumor}_somatic_variants_gatk.vcf"
# 	params:
# 		vcfs=lambda wildcards: expand("-V "+output_somatic+"/"+wildcards.normal+"_vs_"+
# 		                       wildcards.tumor+"_somatic_variants_filtered__{chrom}.vcf", chrom=CHROM)
# 	shell:
# 		"GenomeAnalysisTK \ "
# 		"-T CombineVariants \ "
# 		"-R {ref} \ "
# 		"{params.vcfs} \ "
# 		"-o {output} \ "
# 		"-genotypeMergeOptions UNIQUIFY "

# rule old_mutect2:
# 	input:
# 		normal="{normal}_recal.bam",
# 		tumor="{tumor}_recal.bam",
# 		dbsnp={dbsnp},
# 		cosmicCoding={cosmicCoding},
# 		cosmicNonCoding={cosmicNonCoding}
# 	output:
# 		vcf=output_somatic+"/{normal}_vs_{tumor}_somatic_variants.vcf"
# 	threads: 8
# 	shell:
# 		"GenomeAnalysisTK {mem} \ "
# 		"-T MuTect2 \ "
# 		"-R {ref} \ "
# 		"-I:tumor {input.tumor} \ "
# 		"-I:normal {input.normal} \ "
# 		"--dbsnp {dbsnp} \ "
# 		"--cosmic {cosmicCoding} \ "
# 		"--cosmic {cosmicNonCoding} \ "
# 		"-nct {threads} \ "
# 		"-o {output.vcf} "
